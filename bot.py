import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telethon import TelegramClient, events
from motor.motor_asyncio import AsyncIOMotorClient
import json
import asyncio
from functools import partial
from telethon.tl.functions.channels import JoinChannelRequest
from openai import AsyncOpenAI
import re

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Telegram API credentials
BOT_TOKEN = os.getenv('BOT_TOKEN')
API_ID = int(os.getenv('API_ID', 0))
API_HASH = os.getenv('API_HASH')

# OpenAI client
openai_client = AsyncOpenAI(api_key=os.getenv('OPENAI_API_KEY'))

logger.info(f"Bot Token: {BOT_TOKEN[:10]}...")
logger.info(f"API ID: {API_ID}")
logger.info(f"API Hash: {API_HASH[:10]}...")

# MongoDB connection
MONGO_URI = os.getenv('MONGO_URI', 'mongodb://localhost:27017')
logger.info(f"Connecting to MongoDB at: {MONGO_URI}")

# Global variables
user_client = None  # –ö–ª—ñ—î–Ω—Ç –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∑–≤–∏—á–∞–π–Ω–∏–π –∞–∫–∞—É–Ω—Ç)
bot_client = None   # –ö–ª—ñ—î–Ω—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–±–æ—Ç)
application = None
mongo_client = None

async def init_mongodb():
    global mongo_client
    try:
        mongo_client = AsyncIOMotorClient(MONGO_URI)
        await mongo_client.admin.command('ping')
        logger.info("Successfully connected to MongoDB and verified connection")
        return mongo_client
    except Exception as e:
        logger.error(f"Failed to connect to MongoDB: {e}")
        raise

async def setup_clients():
    """Setup both Telethon clients - user account and bot."""
    global user_client, bot_client
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∑–≤–∏—á–∞–π–Ω–∏–π –∞–∫–∞—É–Ω—Ç)
    if user_client is None:
        logger.info("Setting up user client for reading messages")
        user_client = TelegramClient('user_session', API_ID, API_HASH)
        await user_client.start()
        logger.info("User client started successfully")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        sources = await get_monitored_sources()
        logger.info(f"Monitoring sources: {sources}")
        
        @user_client.on(events.NewMessage())
        async def message_handler(event):
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç
                chat = await event.get_chat()
                chat_username = f"@{chat.username}" if chat.username else str(chat.id)
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª
                sources = await get_monitored_sources()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
                if chat_username in sources:
                    logger.info(f"‚úÖ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ {chat_username}")
                    logger.info(f"üìù –¢–µ–∫—Å—Ç: {event.message.text}")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ü—ñ–Ω–∏
                    price = extract_price(event.message.text)
                    if price is not None:
                        logger.info(f"üí∞ –ó–Ω–∞–π–¥–µ–Ω–æ —Ü—ñ–Ω—É: ${price}")
                        
                        if price <= 10000:
                            logger.info(f"‚ú® –¶—ñ–Ω–∞ ${price} –≤ –º–µ–∂–∞—Ö –ª—ñ–º—ñ—Ç—É")
                            
                            # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                            target_chat_id = os.getenv('TARGET_CHAT_ID')
                            source_link = f"https://t.me/{chat.username}/{event.message.id}"
                            forward_text = f"üöó –ù–æ–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è: ${price}\n\n–î–∂–µ—Ä–µ–ª–æ: {source_link}"
                            
                            if bot_client:
                                await bot_client.send_message(target_chat_id, forward_text)
                                logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {target_chat_id}")
                        else:
                            logger.info(f"‚ùå –¶—ñ–Ω–∞ ${price} –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç")
                    else:
                        logger.info("‚ùå –¶—ñ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–±–æ—Ç)
    if bot_client is None:
        logger.info("Setting up bot client for sending messages")
        bot_client = TelegramClient('bot_session', API_ID, API_HASH)
        await bot_client.start(bot_token=BOT_TOKEN)
        logger.info("Bot client started successfully")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    logger.info(f"Start command received from user {update.effective_user.id}")
    await update.message.reply_text(
        '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –æ–≥–æ–ª–æ—à–µ–Ω—å –ø—Ä–æ –ø—Ä–æ–¥–∞–∂ –∞–≤—Ç–æ. '
        '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    logger.info(f"Help command received from user {update.effective_user.id}")
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/add_source <username> - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –¥–∂–µ—Ä–µ–ª–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É
/list_sources - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–∂–µ—Ä–µ–ª–∞
/remove_source <username> - –í–∏–¥–∞–ª–∏—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ
    """
    await update.message.reply_text(help_text)

async def check_historical_messages(source, hours=72):
    """Check messages from the last 72 hours in the source channel."""
    try:
        logger.info(f"Checking historical messages from {source} for the last {hours} hours")
        
        # Get the timestamp from 72 hours ago
        time_threshold = datetime.now() - timedelta(hours=hours)
        
        # Get messages from the channel
        message_count = 0
        async for message in user_client.iter_messages(source, offset_date=time_threshold, reverse=True):
            message_count += 1
            if message.text:  # Check only text messages
                logger.info(f"Processing message: {message.text}")
                message_text = message.text.lower()
                
                # –†–æ–∑—à–∏—Ä–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ü—ñ–Ω–æ–≤–∏—Ö –º–∞—Ä–∫–µ—Ä—ñ–≤
                price_markers = ['$', 'usd', '–¥–æ–ª', 'dollar']
                if any(marker in message_text for marker in price_markers):
                    price = extract_price(message_text)
                    logger.info(f"Found message with potential price. Text: {message_text}, Extracted price: {price}")
                    
                    if price and price <= 10000:
                        logger.info(f"Price {price} is within range")
                        db = mongo_client.car_bot
                        
                        # Check if we already have this message
                        existing_post = await db.posts.find_one({
                            'source': source,
                            'original_id': message.id
                        })
                        
                        if not existing_post:
                            logger.info(f"New message found, preparing to forward")
                            post_data = {
                                'text': message.text,
                                'source': source,
                                'posted_at': datetime.utcnow(),
                                'original_id': message.id,
                                'price': price,
                                'message_date': message.date
                            }
                            await db.posts.insert_one(post_data)
                            
                            target_chat_id = os.getenv('TARGET_CHAT_ID')
                            logger.info(f"Sending to target chat: {target_chat_id}")
                            
                            source_link = f"https://t.me/{source.replace('@', '')}/{message.id}"
                            forward_text = f"üöó –ù–æ–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è: ${price}\n\n–î–∂–µ—Ä–µ–ª–æ: {source_link}"
                            
                            try:
                                await bot_client.send_message(target_chat_id, forward_text)
                                logger.info(f"Successfully forwarded message with price ${price} from {source}")
                            except Exception as send_error:
                                logger.error(f"Error sending message to target chat: {send_error}")
                            
                            # Add small delay to avoid flooding
                            await asyncio.sleep(1)
                        else:
                            logger.info(f"Message already exists in database")
                    else:
                        logger.info(f"Price {price} is not within range or is None")
        
        logger.info(f"Finished checking historical messages from {source}. Processed {message_count} messages")
    except Exception as e:
        logger.error(f"Error checking historical messages from {source}: {e}")

async def add_source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add a new source to monitor."""
    logger.info(f"Add source command received from user {update.effective_user.id}")
    
    if not context.args:
        await update.message.reply_text('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å username –¥–∂–µ—Ä–µ–ª–∞.')
        return

    source = context.args[0]
    if not source.startswith('@'):
        source = '@' + source

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–∞–Ω–∞–ª
        try:
            channel = await user_client.get_entity(source)
            logger.info(f"Successfully found channel: {source}")
            
            # –î–æ–¥–∞—î–º–æ –∫–∞–Ω–∞–ª –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –æ–¥—Ä–∞–∑—É
            db = mongo_client.car_bot
            
            # Check if source already exists
            existing_source = await db.sources.find_one({'username': source})
            if existing_source:
                await update.message.reply_text('–¶–µ –¥–∂–µ—Ä–µ–ª–æ –≤–∂–µ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.')
                return

            # Add new source
            await db.sources.insert_one({
                'username': source,
                'added_at': datetime.utcnow(),
                'added_by': update.effective_user.id
            })
            logger.info(f"Successfully added source: {source}")
            await update.message.reply_text(f'–î–∂–µ—Ä–µ–ª–æ {source} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.')
                
        except Exception as e:
            logger.error(f"Error finding channel {source}: {e}")
            await update.message.reply_text(f'–ü–æ–º–∏–ª–∫–∞: –ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {source}. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∫–∞–Ω–∞–ª –ø—É–±–ª—ñ—á–Ω–∏–π (–º–∞—î username).')
            return
        
    except Exception as e:
        logger.error(f"Error adding source {source}: {e}")
        await update.message.reply_text(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞: {str(e)}')

async def list_sources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all monitored sources."""
    logger.info(f"List sources command received from user {update.effective_user.id}")
    
    try:
        db = mongo_client.car_bot
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ
        logger.info("Attempting to fetch sources from database...")
        sources = await db.sources.find().to_list(length=None)
        logger.info(f"Database query completed. Found {len(sources) if sources else 0} sources")
        
        if not sources:
            logger.info("No sources found in database")
            await update.message.reply_text('–°–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.')
            return

        sources_text = '–°–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:\n'
        for source in sources:
            sources_text += f"- {source['username']}\n"
        logger.info(f"Found {len(sources)} sources")
        await update.message.reply_text(sources_text)
    except Exception as e:
        error_msg = f"Error listing sources: {str(e)}"
        logger.error(error_msg)
        await update.message.reply_text(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –¥–∂–µ—Ä–µ–ª: {str(e)}')

async def remove_source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Remove a source from monitoring."""
    logger.info(f"Remove source command received from user {update.effective_user.id}")
    
    if not context.args:
        await update.message.reply_text('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å username –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.')
        return

    source = context.args[0]
    if not source.startswith('@'):
        source = '@' + source

    try:
        db = mongo_client.car_bot
        result = await db.sources.delete_one({'username': source})
        if result.deleted_count:
            logger.info(f"Successfully removed source: {source}")
            await update.message.reply_text(f'–î–∂–µ—Ä–µ–ª–æ {source} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.')
        else:
            logger.warning(f"Source not found: {source}")
            await update.message.reply_text(f'–î–∂–µ—Ä–µ–ª–æ {source} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.')
    except Exception as e:
        logger.error(f"Error removing source {source}: {e}")
        await update.message.reply_text(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞: {str(e)}')

async def get_monitored_sources():
    """Get list of monitored sources from database."""
    try:
        db = mongo_client.car_bot
        sources = await db.sources.find().to_list(length=None)
        source_list = [source['username'] for source in sources]
        logger.info(f"Retrieved {len(source_list)} monitored sources")
        return source_list
    except Exception as e:
        logger.error(f"Error getting monitored sources: {e}")
        return []

async def join_channels(client, sources):
    """Join all channels in the sources list."""
    for source in sources:
        try:
            logger.info(f"Attempting to join channel: {source}")
            await client(JoinChannelRequest(source))
            logger.info(f"Successfully joined channel: {source}")
        except Exception as e:
            logger.error(f"Failed to join channel {source}: {e}")

async def analyze_message_with_gpt(text):
    """Analyze message text with GPT to extract price and determine if it's a car sale post."""
    try:
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Telegram –∫–∞–Ω–∞–ª—É:
        
        {text}
        
        –î–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
        {{
            "is_car_sale": true/false,  // —á–∏ —Ü–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–¥–∞–∂ –∞–≤—Ç–æ
            "price_usd": number or null,  // —Ü—ñ–Ω–∞ –≤ USD (null —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)
            "car_info": {{  // —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ (null —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)
                "brand": string,  // –º–∞—Ä–∫–∞
                "model": string,  // –º–æ–¥–µ–ª—å
                "year": number or null,  // —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É
                "condition": string  // —Å—Ç–∞–Ω –∞–≤—Ç–æ
            }}
        }}
        
        –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò –≤ —Ñ–æ—Ä–º–∞—Ç—ñ JSON, –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤."""

        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –∞–Ω–∞–ª—ñ–∑—É—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–¥–∞–∂ –∞–≤—Ç–æ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ JSON."},
                {"role": "user", "content": prompt}
            ],
            temperature=0
        )
        
        result = json.loads(response.choices[0].message.content)
        logger.info(f"GPT analysis result: {result}")
        return result
    except Exception as e:
        logger.error(f"Error analyzing message with GPT: {e}")
        return None

async def handle_new_message(event):
    try:
        chat = await event.get_chat()
        logger.info(f"Processing message from {chat.username or chat.id}")
        logger.info(f"Message text: {event.message.text}")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPT
        analysis = await analyze_message_with_gpt(event.message.text)
        
        if analysis and analysis.get('is_car_sale'):
            price = analysis.get('price_usd')
            car_info = analysis.get('car_info')
            
            if price and price <= 10000:
                logger.info(f"Found valid car sale post with price: ${price}")
                db = mongo_client.car_bot
                
                # Check if we already have this message
                existing_post = await db.posts.find_one({
                    'source': chat.username or str(chat.id),
                    'original_id': event.message.id
                })
                
                if not existing_post:
                    post_data = {
                        'text': event.message.text,
                        'source': chat.username or str(chat.id),
                        'posted_at': datetime.utcnow(),
                        'original_id': event.message.id,
                        'price': price,
                        'car_info': car_info
                    }
                    await db.posts.insert_one(post_data)
                    logger.info(f"Saved message to database")
                    
                    target_chat_id = os.getenv('TARGET_CHAT_ID')
                    logger.info(f"Attempting to forward to {target_chat_id}")
                    
                    source_link = f"https://t.me/{chat.username}/{event.message.id}"
                    car_info_text = f"\n–ê–≤—Ç–æ: {car_info['brand']} {car_info['model']}"
                    if car_info.get('year'):
                        car_info_text += f"\n–†—ñ–∫: {car_info['year']}"
                    if car_info.get('condition'):
                        car_info_text += f"\n–°—Ç–∞–Ω: {car_info['condition']}"
                    
                    forward_text = f"{event.message.text}\n\n–î–∂–µ—Ä–µ–ª–æ: {source_link}\n–ó–Ω–∞–π–¥–µ–Ω–∞ —Ü—ñ–Ω–∞: ${price}{car_info_text}"
                    
                    try:
                        await bot_client.send_message(target_chat_id, forward_text)
                        logger.info(f"Successfully forwarded message to {target_chat_id}")
                    except Exception as send_error:
                        logger.error(f"Error sending message to target chat: {send_error}")
                else:
                    logger.info(f"Message already exists in database")
            else:
                logger.info(f"Price ${price} is above threshold or not found")
        else:
            logger.info("Message is not a car sale post or analysis failed")
    except Exception as e:
        logger.error(f"Error processing message: {e}", exc_info=True)

async def main():
    """Start the bot."""
    global application, user_client, bot_client, mongo_client
    
    logger.info("Starting bot...")
    try:
        # Initialize MongoDB
        await init_mongodb()
        
        # Setup both clients
        await setup_clients()
        logger.info("Both clients setup completed")
        
        # Create the Application for bot commands
        application = Application.builder().token(BOT_TOKEN).build()
        logger.info("Telegram application created")

        # Add command handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("add_source", add_source))
        application.add_handler(CommandHandler("list_sources", list_sources))
        application.add_handler(CommandHandler("remove_source", remove_source))
        logger.info("Command handlers registered")

        # Run the bot
        logger.info("Starting bot polling...")
        
        # Start periodic historical messages check
        async def check_historical_periodically():
            while True:
                try:
                    sources = await get_monitored_sources()
                    logger.info(f"Starting periodic historical check for sources: {sources}")
                    for source in sources:
                        await check_historical_messages(source, hours=6)
                    logger.info("Periodic historical check completed")
                except Exception as e:
                    logger.error(f"Error in periodic historical check: {e}")
                await asyncio.sleep(6 * 3600)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
        
        # Start both clients
        async with application:
            await application.start()
            await application.updater.start_polling()
            logger.info("Bot is running...")
            
            # Start historical check in background
            asyncio.create_task(check_historical_periodically())
            
            # Keep the bot running
            while True:
                await asyncio.sleep(1)
        
    except Exception as e:
        logger.error(f"Error in main function: {e}")
    finally:
        # Cleanup
        if application:
            await application.stop()
        if user_client:
            await user_client.disconnect()
        if bot_client:
            await bot_client.disconnect()
        if mongo_client:
            mongo_client.close()

def run_bot():
    """Run the bot with proper async handling."""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")

def extract_price(text):
    """Extract price from message text."""
    if not text:
        return None
        
    # –®—É–∫–∞—î–º–æ —Ü–∏—Ñ—Ä–∏ –∑ –¥–æ–ª–∞—Ä–æ–º
    patterns = [
        r'\$\s*(\d+(?:,\d{3})*(?:\.\d{2})?)',  # $1000 or $1,000 or $1000.00
        r'(\d+(?:,\d{3})*(?:\.\d{2})?)\s*\$',  # 1000$ or 1,000$ or 1000.00$
        r'(\d+(?:,\d{3})*(?:\.\d{2})?)\s*(?:USD|usd)',  # 1000USD or 1,000USD
        r'(\d+(?:,\d{3})*(?:\.\d{2})?)\s*(?:–¥–æ–ª|dol)',  # 1000–¥–æ–ª or 1000dol
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            try:
                # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–∏ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–æ
                price_str = match.group(1).replace(',', '')
                return float(price_str)
            except ValueError:
                continue
                
    return None

if __name__ == '__main__':
    run_bot() 